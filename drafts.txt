class UserDataForm1(FlaskForm):
    gender = SelectField('Gender', validators=[DataRequired()],
                                choices=[('Male', 'Male'),
                                        ('Female', 'Female')])
    age = IntegerField('Enter Age', validators = [DataRequired()])
    weight = IntegerField('Enter Weight', validators = [DataRequired()])   
    height = IntegerField('Enter Height in centimeters', validators = [DataRequired()])
    calories = IntegerField('How many calories do you consume in a day on average', validators = [DataRequired()])                                 
    submit = SubmitField('Generate Report') 

//
height
weight
age
how many calories do you consume on average

Graph of weight over time
graph of bmi over time

Text of BMI
Text of BMR
text on ideal caloric intake


BMR calculator
66.47 + (13.75 * weight [kg]) + (5.003 * size [cm]) âˆ’ (6.755 * age [years])




    bmi_weight = 0
    bmi_height = 0
    bmi_weight = int(db.session.query(db.func.sum(IncomeExpenses.weight)))
    bmi_height = int(db.session.query(db.func.sum(IncomeExpenses.height)))
    bmi = (bmi_weight / (bmi_height * bmi_height))
















from flask import Blueprint, render_template, flash, redirect, url_for, get_flashed_messages
from flask.helpers import flash
from flask.scaffold import _endpoint_from_view_func
from flask_login import login_required, logout_user, current_user
from flask_wtf import form
from website.form import UserDataForm
from website.models import IncomeExpenses
from website import db
import json



views = Blueprint('views', __name__)


@views.route('/')
@login_required
def home():
    entries = IncomeExpenses.query.order_by(IncomeExpenses.date.desc()).all()
    return render_template('home.html', user=current_user, entries = entries)



@views.route('/add', methods = ['GET', 'POST'])
@login_required
def add():
    form = UserDataForm()
    if form.validate_on_submit():
        entry = IncomeExpenses(type=form.type.data, category=form.category.data, amount=form.amount.data, weight=form.weight.data, gender=form.gender.data, height=form.height.data, age=form.age.data)
        db.session.add(entry)
        db.session.commit()
        flash("Successful Entry!", 'success')
        return redirect(url_for('views.home'))
    return render_template("add.html", form = form, user=current_user)

@views.route('/delete/<int:entry_id>')
@login_required
def delete(entry_id):
    entry = IncomeExpenses.query.get_or_404(int(entry_id))
    db.session.delete(entry)
    db.session.commit()
    flash("Entry deleted", "success")
    return redirect(url_for("views.home"))

@views.route('/dashboard')
@login_required
def dashboard():
    income_vs_expense = db.session.query(db.func.sum(IncomeExpenses.amount), IncomeExpenses.type).group_by(IncomeExpenses.type).order_by(IncomeExpenses.type).all()

    dates = db.session.query(db.func.sum(IncomeExpenses.amount), IncomeExpenses.date).group_by(IncomeExpenses.date).order_by(IncomeExpenses.date).all()

    income_expense = []
    for total_amount, _ in income_vs_expense:
        income_expense.append(total_amount)

    over_time_expenditure = []
    dates_labels = []
    for amount, date in dates:
        over_time_expenditure.append(amount)
        dates_labels.append(date.strftime('%m-%d-%y'))

    return render_template('dashboard.html', user=current_user,
        income_vs_expenses = json.dumps(income_expense),
        over_time_expenditure = json.dumps(over_time_expenditure),
        dates_label = json.dumps(dates_labels)
    )







